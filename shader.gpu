// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 ModelNormalMatrix;
uniform vec3 lightPosition;
varying vec3 normalInter;
varying vec3 vertexPosition;

void main() {
    vec4 vertex4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vertexPosition = vec3(vertex4) / vertex4.w;
    normalInter = vec3(ModelNormalMatrix * vec4(normal, 0.0));

    gl_Position = vertex4;
}
`;

// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 normalInter;
varying vec3 vertexPosition;

uniform vec3 lightPosition; // Declare lightPosition as a uniform variable

float Ka = 0.9;
float Kd = 0.5;
float Ks = 0.5;
float shininessVal = 80.0;
vec3 ambientColor = vec3(0.7, 0.05, 0.05);
vec3 diffuseColor = vec3(0.7, 0.7, 0.7);
vec3 specularColor = vec3(0.0, 0.0, 0.0);

void main() {
    vec3 N = normalize(normalInter);
    vec3 L = normalize(lightPosition - vertexPosition);

    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;

    if (lambertian > 0.0) {
        vec3 R = reflect(-L, N);
        vec3 V = normalize(-vertexPosition);

        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, shininessVal);
    }

    vec3 ambient = Ka * ambientColor;
    vec3 diffuse = Kd * lambertian * diffuseColor;
    vec3 phong = Ks * specular * specularColor;

    vec3 finalColor = ambient + diffuse + phong;

    gl_FragColor = vec4(finalColor, 1.0);
}
`;



// // Vertex shader
// const vertexShaderSource = `
// attribute vec3 position;
// attribute vec3 normal;
// uniform mat4 projection, ModelViewProjectionMatrix, normalMat;
// varying vec3 normalInterp;
// varying vec3 vertPos;
// attribute vec3 vertex;

// void main(){
//     normalInterp = vec3(normalMat * vec4(normal, 0.0));
//     gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
// }
// `;

// // Fragment shader
// const fragmentShaderSource = `
// #ifdef GL_FRAGMENT_PRECISION_HIGH
//    precision highp float;
// #else
//    precision mediump float;
// #endif

// uniform vec4 color;
// varying vec3 normalInterp;
// varying vec3 vertPos;
//     vec3 ambientColor = vec3(0.1);
//     vec3 diffuseColor = vec3(0.2,0.0,0.8);
//     vec3 specularColor = vec3(1.0);
// void main() {
//     vec3 N = normalize(normalInterp);
//     vec3 lightDir = vec3(1.0,1.0,1.0);

//     // Lambert's cosine law
//     float lambertian = max(dot(N, lightDir), 0.0);
//     float specular = 0.0;
//     if(lambertian > 0.0) {
//         vec3 R = reflect(-lightDir, N);      // Reflected light vector
//         vec3 V = normalize(-vertPos); // Vector to viewer
//         // Compute the specular term
//         float specAngle = max(dot(R, V), 0.0);
//         specular = pow(specAngle, 10.0);
//     }

//     gl_FragColor = vec4(ambientColor + lambertian * diffuseColor + specular * specularColor, 1.0);
    
// }`;